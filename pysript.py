# -*- coding: utf-8 -*-
"""pysript.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13LWwPF4Y5OQoQe3v8Mj70rEtbe8-y7wr
"""

import pandas as pd
import numpy as np

def clean_value(value):
    """Removes commas and converts to a numeric type, handling errors."""
    if isinstance(value, str):
        try:
            # Remove commas and convert to float
            return float(value.replace(',', ''))
        except (ValueError, AttributeError):
            # Return 0 if the value is empty or not a valid number
            return 0
    return value if pd.notna(value) else 0

def process_cta_data(input_csv_path='/content/data dump1  - Sheet2.csv', output_json_path='cta_summary.json'):
    """
    Reads a raw CSV data dump, calculates CTA metrics from the 'Total' row,
    and saves the result as a JSON file.
    """
    # Load the CSV file
    df = pd.read_csv(input_csv_path)

    # Find the 'Total' row
    total_row = df[df['page_path'] == 'Total'].iloc[0]

    # Clean and get total traffic
    total_traffic = clean_value(total_row['total_traffic'])

    cta_types = {
        "NavbarCTA": ("navbar_cta_clicks", "navbar_cta_logins"),
        "InlineCTA": ("inline_cta_clicks", "inline_cta_logins"),
        "StickyCTA": ("sticky_cta_clicks", "sticky_cta_logins"),
        "TopCTA": ("top_cta_clicks", "top_cta_logins"),
        "ExitCTA": ("exit_cta_clicks", "exit_cta_logins"),
        "RHSCTA": ("rhs_banner_cta_clicks", "rhs_banner_cta_logins"),
        "BottomMiniCTA": ("bottom_mini_calculator_cta_clicks", "bottom_mini_calculator_cta_logins")
    }

    summary_data = []

    for cta_name, (clicks_col, logins_col) in cta_types.items():
        # Get and clean click and login values from the 'Total' row
        clicks = clean_value(total_row[clicks_col])
        logins = clean_value(total_row[logins_col])

        # Calculate CTR and CVR
        ctr = (clicks / total_traffic) * 100 if total_traffic > 0 else 0
        cvr = (logins / clicks) * 100 if clicks > 0 else 0

        # Format the data into a dictionary
        summary_data.append({
            "CTA_name": cta_name,
            "CTA_clicks": f"{int(clicks):,}", # Format with commas
            "CTA_logins": f"{int(logins):,}", # Format with commas
            "CTR": f"{ctr:.2f}%",
            "CVR": f"{cvr:.2f}%"
        })

    # Save the processed data to a JSON file
    import json
    with open(output_json_path, 'w') as f:
        json.dump(summary_data, f, indent=4)

    print(f"Successfully processed data and saved to {output_json_path}")

# Run the function
if __name__ == "__main__":
   process_cta_data()